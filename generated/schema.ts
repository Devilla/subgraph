// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Deal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deal", id.toString(), this);
  }

  static load(id: string): Deal | null {
    return store.get("Deal", id) as Deal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt | null {
    let value = this.get("count");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set count(value: BigInt | null) {
    if (value === null) {
      this.unset("count");
    } else {
      this.set("count", Value.fromBigInt(value as BigInt));
    }
  }

  get sellToken(): Bytes | null {
    let value = this.get("sellToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sellToken(value: Bytes | null) {
    if (value === null) {
      this.unset("sellToken");
    } else {
      this.set("sellToken", Value.fromBytes(value as Bytes));
    }
  }

  get sellTokenId(): BigInt | null {
    let value = this.get("sellTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("sellTokenId");
    } else {
      this.set("sellTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get sellValue(): BigInt | null {
    let value = this.get("sellValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellValue(value: BigInt | null) {
    if (value === null) {
      this.unset("sellValue");
    } else {
      this.set("sellValue", Value.fromBigInt(value as BigInt));
    }
  }

  get seller(): Bytes | null {
    let value = this.get("seller");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes | null) {
    if (value === null) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromBytes(value as Bytes));
    }
  }

  get buyToken(): Bytes | null {
    let value = this.get("buyToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyToken(value: Bytes | null) {
    if (value === null) {
      this.unset("buyToken");
    } else {
      this.set("buyToken", Value.fromBytes(value as Bytes));
    }
  }

  get buyTokenId(): BigInt | null {
    let value = this.get("buyTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("buyTokenId");
    } else {
      this.set("buyTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get buyValue(): BigInt | null {
    let value = this.get("buyValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyValue(value: BigInt | null) {
    if (value === null) {
      this.unset("buyValue");
    } else {
      this.set("buyValue", Value.fromBigInt(value as BigInt));
    }
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (value === null) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(value as Bytes));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }
}
